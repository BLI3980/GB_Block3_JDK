На практике студентам предстоит решить различные задачи:

Задача 1: Реализация интерфейсов и множественное наследование
Цель: Получить практический опыт в реализации интерфейсов и использовании множественного наследования.

Создайте два интерфейса: Runnable и Eater. В Runnable определите метод run(), в Eater — eat().
Создайте класс Animal, который реализует оба интерфейса.
Реализуйте методы run() и eat() в классе Animal.

Задача 2: Использование методов по умолчанию в интерфейсах
Цель: Изучить использование методов по умолчанию в интерфейсах.

Добавьте метод по умолчанию sleep() в интерфейс Eater.
Создайте экземпляр класса Animal и вызовите метод sleep(). Обратите внимание на то, что класс Animal не нужно
модифицировать.

Задача 3: Работа с адаптерами и частичной реализацией интерфейсов
Цель: Понять принцип работы адаптеров и частичной реализации интерфейсов.

Создайте интерфейс Listener с большим количеством методов.
Создайте абстрактный класс Adapter, который реализует интерфейс Listener, оставляя все методы пустыми.
Создайте класс MouseAdapter, который расширяет Adapter и переопределяет только один метод.

Задача 4: Работа с анонимными классами
Цель: Получить практический опыт в создании и использовании анонимных классов.

Создайте интерфейс Clickable с методом click().
В основном классе программы создайте анонимный класс, реализующий Clickable, и вызовите метод click().

Задача 5: Обработка исключений
Цель: Изучить обработку исключений в контексте графических фреймворков.

Создайте простое графическое приложение с использованием Swing или JavaFX.
Добавьте обработку событий для некоторых действий пользователя (например, клика по кнопке).
В обработчике событий добавьте генерацию исключения.
Реализуйте корректную обработку этого исключения, чтобы приложение продолжало работать после его возникновения.

================================================================================================================
Продолжение задания 4 и семинара 1:

Задание 1:
Необходимо вынести логику работы сервера в класс ChatServer, а в обработчиках кнопок оставить только логику нажатия
кнопки и журналирования сообщений от сервера.
Для достижения цели необходимо описать интерфейс «слушатель сервера», с методом «получить сообщение»,
вызывать его с одной стороны, и реализовать с другой.

Задание 2:
Создать интерфейсы ServerSocketThreadListener и SocketThreadListener, содержащие методы, соответствующие
событиям сервера и клиента чата. Реализовать созданные интерфейсы простым логированием. Со стороны
клиента – только SocketThreadListener, со стороны сервера – оба интерфейса.

Задание 3:
Описать команду разработчиков. В команде разработчиков могут находиться бэкендеры,
которые в состоянии писать серверный код, фронтендеры, которые могут программировать экранные формы,
и фуллстэк разработчики, совмещающие в себе обе компетенции.
Реализовать класс фулстэк разработчика, создать экземпляр и последовательно вызвать
все его методы.

Задание 4:
Дописать третье задание таким образом, чтобы в идентификатор типа Developer записывался объект Frontender,
и далее вызывался метод developGUI(), не изменяя существующие интерфейсы, только код основного класса.